[0] : struct.begin
   SID = Empty
   FirstAnomalyType = EAnomalyType::None
   SecondAnomalyType = EAnomalyType::None
   IsOverlapAllowed = false
struct.end
[1] : struct.begin {refkey=[0]}
   SID = 1
   FirstAnomalyType = EAnomalyType::ExpulsionAnomaly
   SecondAnomalyType = EAnomalyType::DiamondAnomaly
   IsOverlapAllowed = true
struct.end
[2] : struct.begin {refkey=[0]}
   SID = 2
   FirstAnomalyType = EAnomalyType::ExpulsionAnomaly
   SecondAnomalyType = EAnomalyType::ClickerAnomaly
   IsOverlapAllowed = true
struct.end
[3] : struct.begin {refkey=[0]}
   SID = 3
   FirstAnomalyType = EAnomalyType::ClassicFireAnomaly
   SecondAnomalyType = EAnomalyType::DiamondAnomaly
   IsOverlapAllowed = true
struct.end
[4] : struct.begin {refkey=[0]}
   SID = 4
   FirstAnomalyType = EAnomalyType::ClassicFireAnomaly
   SecondAnomalyType = EAnomalyType::RazorAnomaly
   IsOverlapAllowed = true
struct.end
[5] : struct.begin {refkey=[0]}
   SID = 5
   FirstAnomalyType = EAnomalyType::ClassicFireAnomaly
   SecondAnomalyType = EAnomalyType::FlycatcherAnomaly
   IsOverlapAllowed = true
struct.end
[6] : struct.begin {refkey=[0]}
   SID = 6
   FirstAnomalyType = EAnomalyType::ClassicFireAnomaly
   SecondAnomalyType = EAnomalyType::PillowAnomaly
   IsOverlapAllowed = true
struct.end
[7] : struct.begin {refkey=[0]}
   SID = 7
   FirstAnomalyType = EAnomalyType::ClassicFireAnomaly
   SecondAnomalyType = EAnomalyType::ClickerAnomaly
   IsOverlapAllowed = true
struct.end
[8] : struct.begin {refkey=[0]}
   SID = 8
   FirstAnomalyType = EAnomalyType::ClassicFireAnomaly
   SecondAnomalyType = EAnomalyType::ClassicFireAnomaly
   IsOverlapAllowed = true
struct.end
[9] : struct.begin {refkey=[0]}
   SID = 9
   FirstAnomalyType = EAnomalyType::DiamondAnomaly
   SecondAnomalyType = EAnomalyType::DiamondAnomaly
   IsOverlapAllowed = true
struct.end
[10] : struct.begin {refkey=[0]}
   SID = 10
   FirstAnomalyType = EAnomalyType::DiamondAnomaly
   SecondAnomalyType = EAnomalyType::RazorAnomaly
   IsOverlapAllowed = true
struct.end
[11] : struct.begin {refkey=[0]}
   SID = 11
   FirstAnomalyType = EAnomalyType::DiamondAnomaly
   SecondAnomalyType = EAnomalyType::CarouselAnomaly
   IsOverlapAllowed = true
struct.end
[12] : struct.begin {refkey=[0]}
   SID = 12
   FirstAnomalyType = EAnomalyType::DiamondAnomaly
   SecondAnomalyType = EAnomalyType::FlycatcherAnomaly
   IsOverlapAllowed = true
struct.end
[13] : struct.begin {refkey=[0]}
   SID = 13
   FirstAnomalyType = EAnomalyType::DiamondAnomaly
   SecondAnomalyType = EAnomalyType::PillowAnomaly
   IsOverlapAllowed = true
struct.end
[14] : struct.begin {refkey=[0]}
   SID = 14
   FirstAnomalyType = EAnomalyType::DiamondAnomaly
   SecondAnomalyType = EAnomalyType::SoapBubbleAnomaly
   IsOverlapAllowed = true
struct.end
[15] : struct.begin {refkey=[0]}
   SID = 15
   FirstAnomalyType = EAnomalyType::DiamondAnomaly
   SecondAnomalyType = EAnomalyType::ClickerAnomaly
   IsOverlapAllowed = true
struct.end
[16] : struct.begin {refkey=[0]}
   SID = 16
   FirstAnomalyType = EAnomalyType::DiamondAnomaly
   SecondAnomalyType = EAnomalyType::LightningBallAnomaly
   IsOverlapAllowed = true
struct.end
[17] : struct.begin {refkey=[0]}
   SID = 17
   FirstAnomalyType = EAnomalyType::DiamondAnomaly
   SecondAnomalyType = EAnomalyType::ElectroAnomaly
   IsOverlapAllowed = true
struct.end
[18] : struct.begin {refkey=[0]}
   SID = 18
   FirstAnomalyType = EAnomalyType::DiamondAnomaly
   SecondAnomalyType = EAnomalyType::PSYAnomaly
   IsOverlapAllowed = true
struct.end
[19] : struct.begin {refkey=[0]}
   SID = 19
   FirstAnomalyType = EAnomalyType::RazorAnomaly
   SecondAnomalyType = EAnomalyType::RazorAnomaly
   IsOverlapAllowed = true
struct.end
[20] : struct.begin {refkey=[0]}
   SID = 20
   FirstAnomalyType = EAnomalyType::RazorAnomaly
   SecondAnomalyType = EAnomalyType::LavaLampAnomaly
   IsOverlapAllowed = true
struct.end
[21] : struct.begin {refkey=[0]}
   SID = 21
   FirstAnomalyType = EAnomalyType::RazorAnomaly
   SecondAnomalyType = EAnomalyType::FlycatcherAnomaly
   IsOverlapAllowed = true
struct.end
[22] : struct.begin {refkey=[0]}
   SID = 22
   FirstAnomalyType = EAnomalyType::RazorAnomaly
   SecondAnomalyType = EAnomalyType::ClickerAnomaly
   IsOverlapAllowed = true
struct.end
[23] : struct.begin {refkey=[0]}
   SID = 23
   FirstAnomalyType = EAnomalyType::RazorAnomaly
   SecondAnomalyType = EAnomalyType::LightningBallAnomaly
   IsOverlapAllowed = true
struct.end
[24] : struct.begin {refkey=[0]}
   SID = 24
   FirstAnomalyType = EAnomalyType::RazorAnomaly
   SecondAnomalyType = EAnomalyType::ElectroAnomaly
   IsOverlapAllowed = true
struct.end
[25] : struct.begin {refkey=[0]}
   SID = 25
   FirstAnomalyType = EAnomalyType::RazorAnomaly
   SecondAnomalyType = EAnomalyType::PSYAnomaly
   IsOverlapAllowed = true
struct.end
[26] : struct.begin {refkey=[0]}
   SID = 26
   FirstAnomalyType = EAnomalyType::CarouselAnomaly
   SecondAnomalyType = EAnomalyType::ClickerAnomaly
   IsOverlapAllowed = true
struct.end
[27] : struct.begin {refkey=[0]}
   SID = 27
   FirstAnomalyType = EAnomalyType::CarouselAnomaly
   SecondAnomalyType = EAnomalyType::LightningBallAnomaly
   IsOverlapAllowed = true
struct.end
[28] : struct.begin {refkey=[0]}
   SID = 28
   FirstAnomalyType = EAnomalyType::ChemicalAnomaly
   SecondAnomalyType = EAnomalyType::ChemicalAnomaly
   IsOverlapAllowed = true
struct.end
[29] : struct.begin {refkey=[0]}
   SID = 29
   FirstAnomalyType = EAnomalyType::ChemicalAnomaly
   SecondAnomalyType = EAnomalyType::ClickerAnomaly
   IsOverlapAllowed = true
struct.end
[30] : struct.begin {refkey=[0]}
   SID = 30
   FirstAnomalyType = EAnomalyType::ChemicalAnomaly
   SecondAnomalyType = EAnomalyType::LightningBallAnomaly
   IsOverlapAllowed = true
struct.end
[31] : struct.begin {refkey=[0]}
   SID = 31
   FirstAnomalyType = EAnomalyType::ChemicalAnomaly
   SecondAnomalyType = EAnomalyType::PSYAnomaly
   IsOverlapAllowed = true
struct.end
[32] : struct.begin {refkey=[0]}
   SID = 32
   FirstAnomalyType = EAnomalyType::LavaLampAnomaly
   SecondAnomalyType = EAnomalyType::FlycatcherAnomaly
   IsOverlapAllowed = true
struct.end
[33] : struct.begin {refkey=[0]}
   SID = 33
   FirstAnomalyType = EAnomalyType::LavaLampAnomaly
   SecondAnomalyType = EAnomalyType::ClickerAnomaly
   IsOverlapAllowed = true
struct.end
[34] : struct.begin {refkey=[0]}
   SID = 34
   FirstAnomalyType = EAnomalyType::LavaLampAnomaly
   SecondAnomalyType = EAnomalyType::LightningBallAnomaly
   IsOverlapAllowed = true
struct.end
[35] : struct.begin {refkey=[0]}
   SID = 35
   FirstAnomalyType = EAnomalyType::LavaLampAnomaly
   SecondAnomalyType = EAnomalyType::PSYAnomaly
   IsOverlapAllowed = true
struct.end
[36] : struct.begin {refkey=[0]}
   SID = 36
   FirstAnomalyType = EAnomalyType::FlycatcherAnomaly
   SecondAnomalyType = EAnomalyType::ClickerAnomaly
   IsOverlapAllowed = true
struct.end
[37] : struct.begin {refkey=[0]}
   SID = 37
   FirstAnomalyType = EAnomalyType::FlycatcherAnomaly
   SecondAnomalyType = EAnomalyType::LightningBallAnomaly
   IsOverlapAllowed = true
struct.end
[38] : struct.begin {refkey=[0]}
   SID = 38
   FirstAnomalyType = EAnomalyType::FlycatcherAnomaly
   SecondAnomalyType = EAnomalyType::ElectroAnomaly
   IsOverlapAllowed = true
struct.end
[39] : struct.begin {refkey=[0]}
   SID = 39
   FirstAnomalyType = EAnomalyType::FlycatcherAnomaly
   SecondAnomalyType = EAnomalyType::PSYAnomaly
   IsOverlapAllowed = true
struct.end
[40] : struct.begin {refkey=[0]}
   SID = 40
   FirstAnomalyType = EAnomalyType::PillowAnomaly
   SecondAnomalyType = EAnomalyType::PillowAnomaly
   IsOverlapAllowed = true
struct.end
[41] : struct.begin {refkey=[0]}
   SID = 41
   FirstAnomalyType = EAnomalyType::PillowAnomaly
   SecondAnomalyType = EAnomalyType::ClickerAnomaly
   IsOverlapAllowed = true
struct.end
[42] : struct.begin {refkey=[0]}
   SID = 42
   FirstAnomalyType = EAnomalyType::PillowAnomaly
   SecondAnomalyType = EAnomalyType::LightningBallAnomaly
   IsOverlapAllowed = true
struct.end
[43] : struct.begin {refkey=[0]}
   SID = 43
   FirstAnomalyType = EAnomalyType::SoapBubbleAnomaly
   SecondAnomalyType = EAnomalyType::ClickerAnomaly
   IsOverlapAllowed = true
struct.end
[44] : struct.begin {refkey=[0]}
   SID = 44
   FirstAnomalyType = EAnomalyType::ClickerAnomaly
   SecondAnomalyType = EAnomalyType::LightningBallAnomaly
   IsOverlapAllowed = true
struct.end
[45] : struct.begin {refkey=[0]}
   SID = 45
   FirstAnomalyType = EAnomalyType::ClickerAnomaly
   SecondAnomalyType = EAnomalyType::ElectroAnomaly
   IsOverlapAllowed = true
struct.end
[46] : struct.begin {refkey=[0]}
   SID = 46
   FirstAnomalyType = EAnomalyType::ClickerAnomaly
   SecondAnomalyType = EAnomalyType::PSYAnomaly
   IsOverlapAllowed = true
struct.end
[47] : struct.begin {refkey=[0]}
   SID = 47
   FirstAnomalyType = EAnomalyType::LightningBallAnomaly
   SecondAnomalyType = EAnomalyType::LightningBallAnomaly
   IsOverlapAllowed = true
struct.end
[48] : struct.begin {refkey=[0]}
   SID = 48
   FirstAnomalyType = EAnomalyType::LightningBallAnomaly
   SecondAnomalyType = EAnomalyType::ElectroAnomaly
   IsOverlapAllowed = true
struct.end
[49] : struct.begin {refkey=[0]}
   SID = 49
   FirstAnomalyType = EAnomalyType::LightningBallAnomaly
   SecondAnomalyType = EAnomalyType::PSYAnomaly
   IsOverlapAllowed = true
struct.end
[50] : struct.begin {refkey=[0]}
   SID = 50
   FirstAnomalyType = EAnomalyType::ElectroAnomaly
   SecondAnomalyType = EAnomalyType::PSYAnomaly
   IsOverlapAllowed = true
struct.end
[51] : struct.begin {refkey=[0]}
   SID = 51
   FirstAnomalyType = EAnomalyType::PSYAnomaly
   SecondAnomalyType = EAnomalyType::PSYAnomaly
   IsOverlapAllowed = true
struct.end
[52] : struct.begin {refkey=[0]}
   SID = 52
   FirstAnomalyType = EAnomalyType::SoapBubbleAnomaly
   SecondAnomalyType = EAnomalyType::SoapBubbleAnomaly
   IsOverlapAllowed = false
struct.end
[53] : struct.begin {refkey=[0]}
   SID = 53
   FirstAnomalyType = EAnomalyType::ToxicCloudAnomaly
   SecondAnomalyType = EAnomalyType::ToxicCloudAnomaly
   IsOverlapAllowed = true
struct.end
[54] : struct.begin {refkey=[0]}
   SID = 54
   FirstAnomalyType = EAnomalyType::ToxicCloudAnomaly
   SecondAnomalyType = EAnomalyType::ChemicalAnomaly
   IsOverlapAllowed = true
struct.end
[55] : struct.begin {refkey=[0]}
   SID = 55
   FirstAnomalyType = EAnomalyType::ToxicCloudAnomaly
   SecondAnomalyType = EAnomalyType::ElectroAnomaly
   IsOverlapAllowed = true
struct.end