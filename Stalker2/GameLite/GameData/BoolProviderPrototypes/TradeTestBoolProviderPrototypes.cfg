TradeRegenDaysPassed1 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // The amount of in-game days passed since trader regenerated his items last time.
   SID = TradeRegenDaysPassed1
   Type = EBoolProviderType::TraderRegenerationDays
   Days = 1
struct.end
TradeRegenDaysPassed7 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]}
   SID = TradeRegenDaysPassed7
   Type = EBoolProviderType::TraderRegenerationDays
   Days = 7
struct.end
TradeRegenHoursPassed1 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // The amount of in-game hours passed since trader regenerated his items last time.
   SID = TradeRegenHoursPassed1
   Type = EBoolProviderType::TraderRegenerationHours
   Hours = 1
struct.end
TradeRegenHoursPassed3 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]}
   SID = TradeRegenHoursPassed3
   Type = EBoolProviderType::TraderRegenerationHours
   Hours = 3
struct.end
TradeRegenHoursPassed8 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]}
   SID = TradeRegenHoursPassed8
   Type = EBoolProviderType::TraderRegenerationHours
   Hours = 8
struct.end
PlayerRankNewbie : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Player has specified rank - Newbie
   SID = PlayerRankNewbie
   Type = EBoolProviderType::PlayerRank
   Ranks : struct.begin
      [*] = ERank::Newbie
   struct.end
struct.end
PlayerRankExperienced : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Player has specified rank - Experienced
   SID = PlayerRankExperienced
   Type = EBoolProviderType::PlayerRank
   Ranks : struct.begin
      [*] = ERank::Experienced
   struct.end
struct.end
PlayerRankVeteran : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Player has specified rank - Veteran
   SID = PlayerRankVeteran
   Type = EBoolProviderType::PlayerRank
   Ranks : struct.begin
      [*] = ERank::Veteran
   struct.end
struct.end
PlayerRankMaster : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Player has specified rank - Master
   SID = PlayerRankMaster
   Type = EBoolProviderType::PlayerRank
   Ranks : struct.begin
      [*] = ERank::Master
   struct.end
struct.end
TargetRankNewbie : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Target has specified rank - Newbie
   SID = TargetRankNewbie
   Type = EBoolProviderType::TargetRank
   Ranks : struct.begin
      [*] = ERank::Newbie
   struct.end
struct.end
TargetRankExperienced : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Target has specified rank - Experienced
   SID = TargetRankExperienced
   Type = EBoolProviderType::TargetRank
   Ranks : struct.begin
      [*] = ERank::Experienced
   struct.end
struct.end
DutyRelation0 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Player has specified relation with a specified faction - at least 0 Reputation with Duty
   SID = DutyRelation0
   Type = EBoolProviderType::FactionRelation
   Faction = Duty
   ReputationThreshold = 0
struct.end
DutyRelation500 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Player has specified relation with a specified faction - at least 500 Reputation with Duty
   SID = DutyRelation500
   Type = EBoolProviderType::FactionRelation
   Faction = Duty
   ReputationThreshold = 500
struct.end
TargetRelation0 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Player has specified relation with a target - at least 0 Reputation
   SID = TargetRelation0
   Type = EBoolProviderType::TargetRelation
   ReputationThreshold = 0
struct.end
TargetRelation500 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Player has specified relation with a target - at least 500 Reputation
   SID = TargetRelation500
   Type = EBoolProviderType::TargetRelation
   ReputationThreshold = 500
struct.end
PlayerExperiencedAndDuty500 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Multiple condition providers can be combined using EBoolProviderType::And provider - Player has Experienced rank AND at least 500 Reputation with Duty
   SID = PlayerExperiencedAndDuty500
   Type = EBoolProviderType::And
   ProviderSIDs : struct.begin
      [*] = PlayerRankExperienced
      [*] = DutyRelation500
   struct.end
struct.end
PlayerExperiencedOrDuty500 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Also providers can be combined using EBoolProviderType::Or provider - Player has Experienced rank OR at least 500 Reputation with Duty
   SID = PlayerExperiencedOrDuty500
   Type = EBoolProviderType::Or
   ProviderSIDs : struct.begin
      [*] = PlayerRankExperienced
      [*] = DutyRelation500
   struct.end
struct.end
NotPlayerExperiencedOrDuty500 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Condition providers can be negated using EBoolProviderType::Not provider - Player doesn't have Experienced rank and has less than 500 Reputation with Duty
   SID = NotPlayerExperiencedOrDuty500
   Type = EBoolProviderType::Not
   ProviderSID = PlayerExperiencedOrDuty500
struct.end
TargetRelation200 : struct.begin {refurl=../BoolProviderPrototypes.cfg;refkey=[0]} // Player has specified relation with a target - at least 200 Reputation
   SID = TargetRelation200
   Type = EBoolProviderType::TargetRelation
   ReputationThreshold = 200
struct.end